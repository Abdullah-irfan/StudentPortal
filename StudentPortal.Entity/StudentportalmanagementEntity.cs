// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace StudentPortal.Entity
{
    public partial class StudentportalmanagementEntity : DbContext
    {
        public StudentportalmanagementEntity()
        {
        }

        public StudentportalmanagementEntity(DbContextOptions<StudentportalmanagementEntity> options)
            : base(options)
        {
        }

        public virtual DbSet<ExcelMarkDb> ExcelMarkDb { get; set; }
        public virtual DbSet<ExcelStudentMarksDb> ExcelStudentMarksDb { get; set; }
        public virtual DbSet<StaffLoginDetailsDb> StaffLoginDetailsDb { get; set; }
        public virtual DbSet<StudentDb> StudentDb { get; set; }
        public virtual DbSet<StudentDetailsDb> StudentDetailsDb { get; set; }
        public virtual DbSet<StudentExcelDb> StudentExcelDb { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=StudentPortalManagement;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<ExcelMarkDb>(entity =>
            {
                entity.Property(e => e.Inserted_Time_Stamp).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Student_First_Name).IsUnicode(false);

                entity.Property(e => e.Updated_Time_Stamp).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ExcelStudentMarksDb>(entity =>
            {
                entity.Property(e => e.Created_Time_Stamp).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Student_Name).IsUnicode(false);

                entity.Property(e => e.Student_RollNo).IsUnicode(false);

                entity.Property(e => e.Updated_Time_Stamp).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<StaffLoginDetailsDb>(entity =>
            {
                entity.Property(e => e.Inserted_Time_Stamp).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Staff_Password).IsUnicode(false);

                entity.Property(e => e.Staff_User_Name).IsUnicode(false);

                entity.Property(e => e.Updated_Time_Stamp).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<StudentDb>(entity =>
            {
                entity.Property(e => e.Father_Occupation).IsUnicode(false);

                entity.Property(e => e.Inserted_Time_Stamp).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Student_Email_Id).IsUnicode(false);

                entity.Property(e => e.Student_Father_First_Name).IsUnicode(false);

                entity.Property(e => e.Student_Father_Last_Name).IsUnicode(false);

                entity.Property(e => e.Student_First_Name).IsUnicode(false);

                entity.Property(e => e.Student_Gender).IsUnicode(false);

                entity.Property(e => e.Student_Last_Name).IsUnicode(false);

                entity.Property(e => e.Student_Mother_Fisrt_Name).IsUnicode(false);

                entity.Property(e => e.Student_Mother_Last_Name).IsUnicode(false);

                entity.Property(e => e.Student_Password).IsUnicode(false);

                entity.Property(e => e.Updated_Time_Stamp).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<StudentDetailsDb>(entity =>
            {
                entity.Property(e => e.Father_Occupation).IsUnicode(false);

                entity.Property(e => e.Inserted_Time_Stamp).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Student_Email_Id).IsUnicode(false);

                entity.Property(e => e.Student_Father_First_Name).IsUnicode(false);

                entity.Property(e => e.Student_Father_Last_Name).IsUnicode(false);

                entity.Property(e => e.Student_First_Name).IsUnicode(false);

                entity.Property(e => e.Student_Gender).IsUnicode(false);

                entity.Property(e => e.Student_Last_Name).IsUnicode(false);

                entity.Property(e => e.Student_Mother_Fisrt_Name).IsUnicode(false);

                entity.Property(e => e.Student_Mother_Last_Name).IsUnicode(false);

                entity.Property(e => e.Student_Password).IsUnicode(false);

                entity.Property(e => e.Student_Roll_Number).IsUnicode(false);

                entity.Property(e => e.Student_User_Name).IsUnicode(false);

                entity.Property(e => e.Subject).IsUnicode(false);

                entity.Property(e => e.Updated_Time_Stamp).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<StudentExcelDb>(entity =>
            {
                entity.Property(e => e.Average).IsUnicode(false);

                entity.Property(e => e.English).IsUnicode(false);

                entity.Property(e => e.Inserted_Time_Stamp).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Maths).IsUnicode(false);

                entity.Property(e => e.Sciences).IsUnicode(false);

                entity.Property(e => e.Student_First_Name).IsUnicode(false);

                entity.Property(e => e.Student_Roll_No).IsUnicode(false);

                entity.Property(e => e.Total).IsUnicode(false);

                entity.Property(e => e.Updated_Time_Stamp).HasDefaultValueSql("(getdate())");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}